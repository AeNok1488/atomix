syntax = "proto3";

import "protocol.proto";

package atomix.map;

option java_package = "io.atomix.grpc.map";
option java_multiple_files = true;

// Basic map request
message MapId {
    string name = 1;
    oneof proto {
        protocol.MultiRaftProtocol raft = 2;
        protocol.MultiPrimaryProtocol multi_primary = 3;
        protocol.DistributedLogProtocol log = 4;
    }
}

message SizeRequest {
    MapId id = 1;
}

message SizeResponse {
    uint32 size = 1;
}

message PutRequest {
    MapId id = 1;
    string key = 2;
    bytes value = 3;
}

message PutResponse {
    uint64 version = 1;
}

message ReplaceRequest {
    MapId id = 1;
    string key = 2;
    bytes value = 3;
    uint64 version = 4;
}

message ReplaceResponse {
    bool succeeded = 1;
}

message GetRequest {
    MapId id = 1;
    string key = 2;
}

message GetResponse {
    bytes value = 1;
    uint64 version = 2;
}

message RemoveRequest {
    MapId id = 1;
    string key = 2;
    bytes value = 3;
    uint64 version = 4;
}

message RemoveResponse {
    bool succeeded = 1;
}

message ClearRequest {
    MapId id = 1;
}

message ClearResponse {
}

// Map event
message MapEvent {
    MapId id = 1;
    Type type = 2;
    string key = 3;
    bytes value = 4;
    uint64 version = 5;

    enum Type {
        INSERT = 0;
        UPDATE = 1;
        REMOVE = 2;
    }
}

// Map service
service MapService {

    rpc Size(SizeRequest) returns (SizeResponse) {}

    rpc Put(PutRequest) returns (PutResponse) {}

    rpc Replace(ReplaceRequest) returns (ReplaceResponse) {}

    rpc Get(GetRequest) returns (GetResponse) {}

    rpc Remove(RemoveRequest) returns (RemoveResponse) {}

    rpc Clear(ClearRequest) returns (ClearResponse) {}

    rpc Listen(stream MapId) returns (stream MapEvent) {}

}
