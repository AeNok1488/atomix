syntax = "proto3";

import "protocol.proto";

package atomix.election;

option java_package = "io.atomix.grpc.election";
option java_multiple_files = true;

// Election ID
message ElectionId {
    string name = 1;
    oneof proto {
        protocol.MultiRaftProtocol raft = 2;
        protocol.MultiPrimaryProtocol multi_primary = 3;
        protocol.DistributedLogProtocol log = 4;
    }
}

// Leadership info
message Leadership {
    string leader = 1;
    uint64 term = 2;
    repeated string candidates = 3;
}

message GetLeadershipRequest {
    ElectionId id = 1;
}

message GetLeadershipResponse {
    Leadership leadership = 1;
}

message RunRequest {
    ElectionId id = 1;
    string candidate = 2;
}

message RunResponse {
    Leadership leadership = 1;
}

message WithdrawRequest {
    ElectionId id = 1;
    string candidate = 2;
}

message WithdrawResponse {
}

message AnointRequest {
    ElectionId id = 1;
    string candidate = 2;
}

message AnointResponse {
    bool succeeded = 1;
}

message PromoteRequest {
    ElectionId id = 1;
    string candidate = 2;
}

message PromoteResponse {
    bool succeeded = 1;
}

message EvictRequest {
    ElectionId id = 1;
    string candidate = 2;
}

message EvictResponse {
}

// Leader election event
message ElectionEvent {
    ElectionId id = 1;
    Leadership leadership = 2;
}

// Election service
service ElectionService {

    rpc GetLeadership(GetLeadershipRequest) returns (GetLeadershipResponse) {}

    rpc Run(RunRequest) returns (RunResponse) {}

    rpc Withdraw(WithdrawRequest) returns (WithdrawResponse) {}

    rpc Anoint(AnointRequest) returns (AnointResponse) {}

    rpc Promote(PromoteRequest) returns (PromoteResponse) {}

    rpc Evict(EvictRequest) returns (EvictResponse) {}

    rpc Listen(stream ElectionId) returns (stream ElectionEvent) {}

}
