syntax = "proto3";

import "protocol.proto";

package atomix.multiset;

option java_package = "io.atomix.grpc.multiset";
option java_multiple_files = true;

// Multiset ID
message MultisetId {
    string name = 1;
    oneof proto {
        protocol.MultiRaftProtocol raft = 2;
        protocol.MultiPrimaryProtocol multi_primary = 3;
        protocol.DistributedLogProtocol log = 4;
    }
}

message AddRequest {
    MultisetId id = 1;
    bytes value = 2;
    uint32 occurrences = 3;
}

message AddResponse {
    uint32 count = 1;
}

message RemoveRequest {
    MultisetId id = 1;
    bytes value = 2;
    uint32 occurrences = 3;
}

message RemoveResponse {
    uint32 count = 1;
}

message SetRequest {
    MultisetId id = 1;
    bytes value = 2;
    uint32 count = 3;
}

message SetResponse {
    uint32 count = 1;
}

message ContainsRequest {
    MultisetId id = 1;
    bytes value = 2;
}

message ContainsResponse {
    bool contains = 1;
}

message SizeRequest {
    MultisetId id = 1;
}

message SizeResponse {
    uint32 size = 1;
}

message CountRequest {
    MultisetId id = 1;
    bytes value = 2;
}

message CountResponse {
    uint32 count = 1;
}

message ClearRequest {
    MultisetId id = 1;
}

message ClearResponse {
}

// Multiset event
message MultisetEvent {
    MultisetId id = 1;
    Type type = 2;
    bytes value = 3;

    // Multiset event type
    enum Type {
        ADDED = 0;
        REMOVED = 1;
    }
}

// Multiset service
service MultisetService {

    rpc Add(AddRequest) returns (AddResponse) {}

    rpc Set(SetRequest) returns (SetResponse) {}

    rpc Remove(RemoveRequest) returns (RemoveResponse) {}

    rpc Contains(ContainsRequest) returns (ContainsResponse) {}

    rpc Size(SizeRequest) returns (SizeResponse) {}

    rpc Count(CountRequest) returns (CountResponse) {}

    rpc Clear(ClearRequest) returns (ClearResponse) {}

    rpc Listen(stream MultisetId) returns (stream MultisetEvent) {}

}
