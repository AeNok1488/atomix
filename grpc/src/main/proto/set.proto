syntax = "proto3";

package atomix.set;

import "protocol.proto";
import "google/protobuf/duration.proto";

option java_package = "io.atomix.grpc.set";
option java_multiple_files = true;

// Set ID
message SetId {
    string name = 1;
    oneof proto {
        protocol.MultiRaftProtocol raft = 2;
        protocol.MultiPrimaryProtocol multi_primary = 3;
        protocol.DistributedLogProtocol log = 4;
    }
}

message CreateRequest {
    SetId id = 1;
    google.protobuf.Duration timeout = 2;
}

message CreateResponse {
    uint64 session_id = 1;
}

message KeepAliveRequest {
    uint64 session_id = 1;
    uint64 event_index = 2;
    uint64 command_sequence = 3;
}

message KeepAliveResponse {
}

message CloseRequest {
    uint64 session_id = 1;
    bool delete = 2;
}

message CloseResponse {
}

message AddRequest {
    uint64 session_id = 1;
    repeated bytes values = 2;
}

message AddResponse {
    bool added = 1;
}

message RemoveRequest {
    uint64 session_id = 1;
    repeated bytes values = 2;
}

message RemoveResponse {
    bool removed = 1;
}

message ContainsRequest {
    uint64 session_id = 1;
    repeated bytes values = 2;
}

message ContainsResponse {
    bool contains = 1;
}

message SizeRequest {
    uint64 session_id = 1;
}

message SizeResponse {
    uint32 size = 1;
}

message ClearRequest {
    uint64 session_id = 1;
}

message ClearResponse {
}

// Set event
message SetEvent {
    uint64 session_id = 1;
    Type type = 2;
    bytes value = 3;

    // Set event type
    enum Type {
        ADDED = 0;
        REMOVED = 1;
    }
}

// Set service
service SetService {

    rpc Create (CreateRequest) returns (CreateResponse) {}

    rpc KeepAlive (KeepAliveRequest) returns (KeepAliveResponse) {}

    rpc Close (CloseRequest) returns (CloseResponse) {}

    rpc Add (AddRequest) returns (AddResponse) {}

    rpc Remove (RemoveRequest) returns (RemoveResponse) {}

    rpc Contains (ContainsRequest) returns (ContainsResponse) {}

    rpc Size (SizeRequest) returns (SizeResponse) {}

    rpc Clear (ClearRequest) returns (ClearResponse) {}

    rpc Listen (stream SetId) returns (stream SetEvent) {}

}
