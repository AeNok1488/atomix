syntax = "proto3";

package atomix.map.service;

option java_package = "io.atomix.core.map.impl";
option java_outer_classname = "AtomicMapProto";
option java_multiple_files = true;

// Atomic map snapshot
message AtomicMapSnapshot {
    repeated int64 listeners = 1;
    repeated string prepared_keys = 2;
    map<string, AtomicMapEntryValue> entries = 3;
    map<string, AtomicMapTransactionScope> transactions = 4;
    int64 version = 5;
    map<int64, int64> iterators = 6;
}

// Atomic map entry value
message AtomicMapEntryValue {
    Type type = 1;
    int64 version = 2;
    bytes value = 3;
    int64 created = 4;
    int64 ttl = 5;

    enum Type {
        VALUE = 0;
        TOMBSTONE = 1;
    }
}

// Atomic map transaction scope
message AtomicMapTransactionScope {
    int64 version = 1;
    int64 start_version = 2;
    repeated AtomicMapUpdate updates = 3;
}

// Transaction update
message AtomicMapUpdate {
    Type type = 1;
    string key = 2;
    bytes value = 3;
    int64 version = 4;

    enum Type {
        LOCK = 0;
        VERSION_MATCH = 1;
        PUT_IF_VERSION_MATCH = 2;
        REMOVE_IF_VERSION_MATCH = 3;
        PUT_IF_ABSENT = 4;
    }
}
