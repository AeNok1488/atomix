syntax = "proto3";

package atomix.election.service;

import "atomix/primitive/service.proto";

option java_package = "io.atomix.core.election.impl";
option java_outer_classname = "LeaderElectionProto";
option java_multiple_files = true;

// Leader election snapshot
message LeaderElectionSnapshot {
    uint64 term = 1;
    uint64 timestamp = 2;
    LeaderElectionRegistration leader = 3;
    repeated LeaderElectionRegistration candidates = 4;
}

// Leader election registration
message LeaderElectionRegistration {
    string id = 1;
    uint64 session_id = 2;
}

message EnterRequest {
    string id = 1;
}

message EnterResponse {
    uint64 term = 1;
    uint64 timestamp = 2;
    string leader = 3;
    repeated string candidates = 4;
}

message WithdrawRequest {
    string id = 1;
}

message WithdrawResponse {
    bool succeeded = 1;
}

message AnointRequest {
    string id = 1;
}

message AnointResponse {
    bool succeeded = 1;
}

message PromoteRequest {
    string id = 1;
}

message PromoteResponse {
    bool succeeded = 1;
}

message EvictRequest {
    string id = 1;
}

message EvictResponse {
    bool succeeded = 1;
}

message GetLeadershipRequest {

}

message GetLeadershipResponse {
    uint64 term = 1;
    uint64 timestamp = 2;
    string leader = 3;
    repeated string candidates = 4;
}

message ListenRequest {

}

message ListenResponse {
    Type type = 1;
    uint64 term = 2;
    uint64 timestamp = 3;
    string leader = 4;
    repeated string candidates = 5;

    enum Type {
        CHANGED = 0;
    }
}

message UnlistenRequest {
    int64 stream_id = 1;
}

message UnlistenResponse {
}

// Leader election service
service LeaderElectionService {
    rpc Enter(EnterRequest) returns (EnterResponse) {
        option (atomix.primitive.service.operation) = {
            name: "enter"
            type: COMMAND
        };
    }

    rpc Withdraw(WithdrawRequest) returns (WithdrawResponse) {
        option (atomix.primitive.service.operation) = {
            name: "withdraw"
            type: COMMAND
        };
    }

    rpc Anoint(AnointRequest) returns (AnointResponse) {
        option (atomix.primitive.service.operation) = {
            name: "anoint"
            type: COMMAND
        };
    }

    rpc Promote(PromoteRequest) returns (PromoteResponse) {
        option (atomix.primitive.service.operation) = {
            name: "promote"
            type: COMMAND
        };
    }

    rpc Evict(EvictRequest) returns (EvictResponse) {
        option (atomix.primitive.service.operation) = {
            name: "evict"
            type: COMMAND
        };
    }

    rpc GetLeadership(GetLeadershipRequest) returns (GetLeadershipResponse) {
        option (atomix.primitive.service.operation) = {
            name: "getLeadership"
            type: QUERY
        };
    }

    rpc Listen(ListenRequest) returns (stream ListenResponse) {
        option (atomix.primitive.service.operation) = {
            name: "listen"
            type: COMMAND
        };
    }

    rpc Unlisten(UnlistenRequest) returns (UnlistenResponse) {
        option (atomix.primitive.service.operation) = {
            name: "unlisten"
            type: COMMAND
        };
    }
}
