syntax = "proto3";

package atomix.lock.service;

import "atomix/primitive/service.proto";

option java_package = "io.atomix.core.lock.impl";
option java_outer_classname = "AtomicLockProto";
option java_multiple_files = true;
option java_generic_services = false;

// Lock snapshot
message AtomicLockSnapshot {
    LockCall lock = 1;
    repeated LockCall queue = 2;
}

// Lock call
message LockCall {
    int32 id = 1;
    int64 index = 2;
    int64 session_id = 3;
    int64 expire = 4;
}

message LockRequest {
    int32 id = 1;
    int64 timeout = 2;
}

message LockResponse {
    int32 id = 1;
    int64 index = 2;
    bool acquired = 3;
}

message UnlockRequest {
    int32 id = 1;
    int64 index = 2;
}

message UnlockResponse {
    int64 index = 1;
}

message IsLockedRequest {
    int32 id = 1;
    int64 index = 2;
}

message IsLockedResponse {
    int64 index = 1;
    bool locked = 2;
}

// Lock service
service LockService {
    rpc Lock(LockRequest) returns (stream LockResponse) {
        option (atomix.primitive.service.operation) = {
            name: "lock"
            type: COMMAND
        };
    }

    rpc Unlock(UnlockRequest) returns (UnlockResponse) {
        option (atomix.primitive.service.operation) = {
            name: "unlock"
            type: COMMAND
        };
    }

    rpc IsLocked(IsLockedRequest) returns (IsLockedResponse) {
        option (atomix.primitive.service.operation) = {
            name: "islocked"
            type: QUERY
        };
    }
}
