syntax = "proto3";

package atomix.set.service;

import "atomix/primitive/service.proto";

option java_package = "io.atomix.core.set.impl";
option java_outer_classname = "AtomicSetProto";
option java_multiple_files = true;

// Distributed set snapshot
message DistributedSetSnapshot {
    repeated string values = 1;
    repeated int64 listeners = 2;
    repeated string locked_elements = 4;
    map<string, DistributedSetTransaction> transactions = 5;
}

// Distributed set transaction
message DistributedSetTransaction {
    int64 version = 1;
    repeated DistributedSetUpdate updates = 2;
}

// Transaction update
message DistributedSetUpdate {
    Type type = 1;
    string value = 2;

    enum Type {
        ADD = 0;
        REMOVE = 1;
        CONTAINS = 2;
        NOT_CONTAINS = 3;
    }
}

message SizeRequest {
}

message SizeResponse {
    int64 index = 1;
    int32 size = 2;
}

message ContainsRequest {
    repeated string values = 1;
}

message ContainsResponse {
    int64 index = 1;
    bool contains = 2;
}

message AddRequest {
    repeated string values = 1;
}

message AddResponse {
    int64 index = 1;
    UpdateStatus status = 2;
    bool added = 3;
}

message RemoveRequest {
    repeated string values = 1;
}

message RemoveResponse {
    int64 index = 1;
    UpdateStatus status = 2;
    bool removed = 3;
}

message ClearRequest {
}

message ClearResponse {
    int64 index = 1;
}

message ListenRequest {

}

message ListenResponse {
    int64 index = 1;
}

message SetEvent {
    int64 index = 1;
    string value = 2;

    enum Type {
        ADDED = 0;
        REMOVED = 1;
    }
}

message UnlistenRequest {

}

message UnlistenResponse {
    int64 index = 1;
}

message IterateRequest {
}

message IterateResponse {
    int64 index = 1;
    int32 size = 2;
}

message IterateEvent {
    int64 index = 1;
    string value = 2;
}

enum UpdateStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
}

message PrepareRequest {
    string transaction_id = 1;
    DistributedSetTransaction transaction = 2;
}

message PrepareResponse {
    int64 index = 1;
    Status status = 2;

    enum Status {
        OK = 0;
        PARTIAL_FAILURE = 1;
        CONCURRENT_TRANSACTION = 2;
        OPTIMISTIC_LOCK_FAILURE = 3;
    }
}

message CommitRequest {
    string transaction_id = 1;
}

message CommitResponse {
    int64 index = 1;
    Status status = 2;

    enum Status {
        OK = 0;
        UNKNOWN_TRANSACTION_ID = 1;
        FAILURE_TO_PREPARE = 2;
        FAILURE_DURING_COMMIT = 3;
    }
}

message RollbackRequest {
    string transaction_id = 1;
}

message RollbackResponse {
    int64 index = 1;
    Status status = 2;

    enum Status {
        OK = 0;
        UNKNOWN_TRANSACTION_ID = 1;
    }
}

// Set service
service SetService {
    rpc Size(SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.service.operation) = {
            name: "size"
            type: QUERY
        };
    }
    rpc Contains(ContainsRequest) returns (ContainsResponse) {
        option (atomix.primitive.service.operation) = {
            name: "contains"
            type: QUERY
        };
    }
    rpc Add(AddRequest) returns (AddResponse) {
        option (atomix.primitive.service.operation) = {
            name: "add"
            type: COMMAND
        };
    }
    rpc Remove(RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.service.operation) = {
            name: "remove"
            type: COMMAND
        };
    }
    rpc Clear(ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.service.operation) = {
            name: "clear"
            type: COMMAND
        };
    }
    rpc Listen(ListenRequest) returns (ListenResponse) {
        option (atomix.primitive.service.operation) = {
            name: "listen"
            type: COMMAND
        };
    }
    rpc OnEvent(atomix.primitive.service.EventListener) returns (stream SetEvent) {
        option (atomix.primitive.service.event) = {
            name: "event"
        };
    }
    rpc Unlisten(UnlistenRequest) returns (UnlistenResponse) {
        option (atomix.primitive.service.operation) = {
            name: "unlisten"
            type: COMMAND
        };
    }
    rpc Iterate(IterateRequest) returns (IterateResponse) {
        option (atomix.primitive.service.operation) = {
            name: "iterate"
            type: COMMAND
        };
    }
    rpc OnIterate(atomix.primitive.service.EventListener) returns (stream IterateEvent) {
        option (atomix.primitive.service.event) = {
            name: "iterate"
        };
    }
    rpc Prepare(PrepareRequest) returns (PrepareResponse) {
        option (atomix.primitive.service.operation) = {
            name: "prepare"
            type: COMMAND
        };
    }
    rpc PrepareAndCommit(PrepareRequest) returns (PrepareResponse) {
        option (atomix.primitive.service.operation) = {
            name: "prepareAndCommit"
            type: COMMAND
        };
    }
    rpc Commit(CommitRequest) returns (CommitResponse) {
        option (atomix.primitive.service.operation) = {
            name: "commit"
            type: COMMAND
        };
    }
    rpc Rollback(RollbackRequest) returns (RollbackResponse) {
        option (atomix.primitive.service.operation) = {
            name: "rollback"
            type: COMMAND
        };
    }
}
