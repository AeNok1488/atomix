syntax = "proto3";

package atomix.value.service;

import "google/protobuf/empty.proto";
import "atomix/metadata.proto";
import "atomix/primitive/service.proto";

option java_package = "io.atomix.core.value.impl";
option java_outer_classname = "ValueProto";
option java_multiple_files = true;

// Atomic value snapshot
message AtomicValueSnapshot {
    int64 version = 1;
    bytes value = 2;
    repeated AtomicValueListener listeners = 3;
}

// Atomic value listener.
message AtomicValueListener {
    uint64 session_id = 1;
    uint64 stream_id = 2;
}

message GetRequest {

}

message GetResponse {
    atomix.metadata.Metadata metadata = 1;
    bytes value = 2;
    int64 version = 3;
}

message SetRequest {
    bytes value = 1;
}

message SetResponse {
    atomix.metadata.Metadata metadata = 1;
    int64 version = 2;
    bytes previous_value = 3;
    int64 previous_version = 4;
}

message CheckAndSetRequest {
    bytes check = 1;
    bytes update = 2;
    int64 version = 3;
}

message CheckAndSetResponse {
    atomix.metadata.Metadata metadata = 1;
    int64 version = 2;
    bool succeeded = 3;
}

message ListenRequest {

}

message ListenResponse {
    atomix.metadata.Metadata metadata = 1;
    Type type = 2;
    bytes previous_value = 3;
    int64 previous_version = 4;
    bytes new_value = 5;
    int64 new_version = 6;

    enum Type {
        UPDATED = 0;
    }
}

message UnlistenRequest {
    int64 stream_id = 1;
}

message UnlistenResponse {
    atomix.metadata.Metadata metadata = 1;
}

service ValueService {
    rpc Set(SetRequest) returns (SetResponse) {
        option (atomix.primitive.service.operation) = {
            name: "set"
            type: COMMAND
        };
    }

    rpc Get(GetRequest) returns (GetResponse) {
        option (atomix.primitive.service.operation) = {
            name: "get"
            type: QUERY
        };
    }

    rpc CheckAndSet(CheckAndSetRequest) returns (CheckAndSetResponse) {
        option (atomix.primitive.service.operation) = {
            name: "cas"
            type: COMMAND
        };
    }

    rpc Listen(ListenRequest) returns (stream ListenResponse) {
        option (atomix.primitive.service.operation) = {
            name: "listen"
            type: COMMAND
        };
    }

    rpc Unlisten(UnlistenRequest) returns (UnlistenResponse) {
        option (atomix.primitive.service.operation) = {
            name: "unlisten"
            type: COMMAND
        };
    }
}