syntax = "proto3";

package atomix.cluster;

import "atomix/cluster/discovery.proto";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";

option java_package = "io.atomix.cluster";
option java_multiple_files = true;

// Atomix cluster configuration
message ClusterConfig {
    string cluster_id = 1;
    Member node = 2;
    atomix.cluster.DiscoveryConfig discovery = 3;
    MembershipConfig membership = 4;
    MessagingConfig messaging = 5;
}

// Atomix membership configuration
message MembershipConfig {
    bool broadcast_updates = 1;
    bool broadcast_disputes = 2;
    bool notify_suspect = 3;
    google.protobuf.Duration gossip_interval = 4;
    int32 gossip_fanout = 5;
    google.protobuf.Duration probe_interval = 6;
    google.protobuf.Duration probe_timeout = 7;
    int32 suspect_probes = 8;
    google.protobuf.Duration failure_timeout = 9;
}

// Atomix messaging configuration
message MessagingConfig {
    google.protobuf.Duration connect_timeout = 1;
    TlsConfig tls = 2;
}

// TLS configuration
message TlsConfig {
    bool enabled = 1;
    string key_path = 2;
    string cert_path = 3;
}

message ClusterMessage {
    oneof message {
        JoinRequest join_request = 1;
        JoinResponse join_response = 2;
        GossipMessage gossip = 3;
        ProbeRequest probe_request = 4;
        ProbeResponse probe_response = 5;
        VerifyRequest verify_request = 6;
        VerifyResponse verify_response = 7;
        LeaveRequest leave_request = 8;
        LeaveResponse leave_response = 9;
    }
}

message JoinRequest {
    Member member = 1;
}

message JoinResponse {
    repeated Member members = 1;
}

message GossipMessage {
    repeated Member updates = 1;
}

message ProbeRequest {
    Member source = 1;
    Member target = 2;
}

message ProbeResponse {
    Member member = 1;
}

message VerifyRequest {
    Member target = 1;
}

message VerifyResponse {
    Member target = 1;
    bool succeeded = 2;
}

message LeaveRequest {
    Member member = 1;
}

message LeaveResponse {
}

// Cluster member
message Member {
    string id = 1;
    string namespace = 2;
    string host = 3;
    int32 port = 4;
    string zoneId = 5;
    string rackId = 6;
    string hostId = 7;
    map<string, string> properties = 8;
    string version = 9;
    int64 timestamp = 10;
    State state = 11;
    int64 incarnation_number = 12;

    enum State {
        ALIVE = 0;
        SUSPECT = 1;
        DEAD = 2;
    }
}

// Cluster membership event
message MemberEvent {
    Type type = 1;
    Member member = 2;

    enum Type {
        ADDED = 0;
        REMOVED = 1;
    }
}

// Cluster membership service
service MembershipService {
    // Joins the cluster
    rpc Join(stream ClusterMessage) returns (stream ClusterMessage) {}
}
