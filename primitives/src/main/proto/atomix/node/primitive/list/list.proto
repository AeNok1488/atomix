// Copyright 2019-present Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package atomix.node.primitive.list;

import "atomix/node/service/descriptor.proto";

option java_package = "io.atomix.node.primitive.list";
option java_outer_classname = "ListProto";
option java_multiple_files = true;

// Distributed list snapshot
message DistributedListSnapshot {
    repeated string values = 1;
}

message SizeRequest {
}

message SizeResponse {
    int32 size = 1;
}

message ContainsRequest {
    string value = 1;
}

message ContainsResponse {
    bool contains = 1;
}

message AppendRequest {
    string value = 1;
}

message AppendResponse {
    ResponseStatus status = 1;
}

message InsertRequest {
    uint32 index = 1;
    string value = 2;
}

message InsertResponse {
    ResponseStatus status = 1;
}

message GetRequest {
    uint32 index = 1;
}

message GetResponse {
    ResponseStatus status = 1;
    string value = 2;
}

message RemoveRequest {
    uint32 index = 1;
}

message RemoveResponse {
    ResponseStatus status = 1;
    string value = 2;
}

message ClearRequest {
}

message ClearResponse {
}

message ListenRequest {

}

message ListenResponse {
    Type type = 1;
    string value = 2;

    enum Type {
        ADDED = 0;
        REMOVED = 1;
    }
}

message UnlistenRequest {
    int64 stream_id = 1;
}

message UnlistenResponse {
}

message IterateRequest {
}

message IterateResponse {
    string value = 1;
}

enum ResponseStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
    OUT_OF_BOUNDS = 3;
}

// List service
service ListService {
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.node.service.operation) = {
            name: "size"
            type: QUERY
        };
    }
    rpc Contains (ContainsRequest) returns (ContainsResponse) {
        option (atomix.node.service.operation) = {
            name: "contains"
            type: QUERY
        };
    }
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.node.service.operation) = {
            name: "get"
            type: QUERY
        };
    }
    rpc Append (AppendRequest) returns (AppendResponse) {
        option (atomix.node.service.operation) = {
            name: "add"
            type: COMMAND
        };
    }
    rpc Insert (InsertRequest) returns (InsertResponse) {
        option (atomix.node.service.operation) = {
            name: "insert"
            type: COMMAND
        };
    }
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.node.service.operation) = {
            name: "remove"
            type: COMMAND
        };
    }
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.node.service.operation) = {
            name: "clear"
            type: COMMAND
        };
    }
    rpc Listen (ListenRequest) returns (stream ListenResponse) {
        option (atomix.node.service.operation) = {
            name: "listen"
            type: COMMAND
        };
    }
    rpc Unlisten (UnlistenRequest) returns (UnlistenResponse) {
        option (atomix.node.service.operation) = {
            name: "unlisten"
            type: COMMAND
        };
    }
    rpc Iterate (IterateRequest) returns (stream IterateResponse) {
        option (atomix.node.service.operation) = {
            name: "iterate"
            type: QUERY
        };
    }
}
