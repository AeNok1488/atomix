// Copyright 2019-present Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package atomix.node.primitive.lock;

import "atomix/node/service/descriptor.proto";

option java_package = "io.atomix.node.primitive.lock";
option java_outer_classname = "AtomicLockProto";
option java_multiple_files = true;

// Lock snapshot
message AtomicLockSnapshot {
    LockCall lock = 1;
    repeated LockCall queue = 2;
}

// Lock call
message LockCall {
    int64 index = 1;
    int64 session_id = 2;
    int64 expire = 3;
}

message LockRequest {
    int64 timeout = 1;
}

message LockResponse {
    int64 index = 1;
    bool acquired = 2;
}

message UnlockRequest {
    int64 index = 1;
}

message UnlockResponse {
    bool succeeded = 1;
}

message IsLockedRequest {
    int64 index = 1;
}

message IsLockedResponse {
    bool locked = 1;
}

// Lock service
service LockService {
    rpc Lock(LockRequest) returns (LockResponse) {
        option (atomix.node.service.operation) = {
            name: "lock"
            type: COMMAND
            async: true
        };
    }

    rpc Unlock(UnlockRequest) returns (UnlockResponse) {
        option (atomix.node.service.operation) = {
            name: "unlock"
            type: COMMAND
        };
    }

    rpc IsLocked(IsLockedRequest) returns (IsLockedResponse) {
        option (atomix.node.service.operation) = {
            name: "islocked"
            type: QUERY
        };
    }
}
