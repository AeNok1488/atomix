// Copyright 2019-present Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package atomix.server.service.counter;

import "atomix/service/descriptor.proto";

option java_package = "io.atomix.server.service.counter";
option java_outer_classname = "CounterProto";
option java_multiple_files = true;

// Atomic counter snapshot
message AtomicCounterSnapshot {
    int64 counter = 1;
}

message IncrementRequest {
    int64 delta = 1;
}

message IncrementResponse {
    int64 previous_value = 1;
    int64 next_value = 2;
}

message DecrementRequest {
    int64 delta = 1;
}

message DecrementResponse {
    int64 previous_value = 1;
    int64 next_value = 2;
}

message GetRequest {

}

message GetResponse {
    int64 value = 1;
}

message SetRequest {
    int64 value = 1;
}

message SetResponse {
    int64 previous_value = 1;
}

message CheckAndSetRequest {
    int64 expect = 1;
    int64 update = 2;
}

message CheckAndSetResponse {
    bool succeeded = 1;
}

service CounterService {
    rpc Set(SetRequest) returns (SetResponse) {
        option (atomix.service.operation) = {
            name: "set"
            type: COMMAND
        };
    }

    rpc Get(GetRequest) returns (GetResponse) {
        option (atomix.service.operation) = {
            name: "get"
            type: QUERY
        };
    }

    rpc Increment(IncrementRequest) returns (IncrementResponse) {
        option (atomix.service.operation) = {
            name: "increment"
            type: COMMAND
        };
    }

    rpc Decrement(DecrementRequest) returns (DecrementResponse) {
        option (atomix.service.operation) = {
            name: "decrement"
            type: COMMAND
        };
    }

    rpc CheckAndSet(CheckAndSetRequest) returns (CheckAndSetResponse) {
        option(atomix.service.operation) = {
            name: "cas"
            type: COMMAND
        };
    }
}