// Copyright 2019-present Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package atomix.server.service.value;

import "atomix/service/descriptor.proto";

option java_package = "io.atomix.server.service.value";
option java_outer_classname = "ValueProto";
option java_multiple_files = true;

// Atomic value snapshot
message AtomicValueSnapshot {
    int64 version = 1;
    bytes value = 2;
}

message GetRequest {

}

message GetResponse {
    bytes value = 1;
    int64 version = 2;
}

message SetRequest {
    bytes value = 1;
}

message SetResponse {
    int64 version = 1;
    bytes previous_value = 2;
    int64 previous_version = 3;
}

message CheckAndSetRequest {
    bytes check = 1;
    bytes update = 2;
    int64 version = 3;
}

message CheckAndSetResponse {
    int64 version = 1;
    bool succeeded = 2;
}

message ListenRequest {

}

message ListenResponse {
    Type type = 1;
    bytes previous_value = 2;
    int64 previous_version = 3;
    bytes new_value = 4;
    int64 new_version = 5;

    enum Type {
        UPDATED = 0;
    }
}

message UnlistenRequest {
    int64 stream_id = 1;
}

message UnlistenResponse {
}

service ValueService {
    rpc Set(SetRequest) returns (SetResponse) {
        option (atomix.service.operation) = {
            name: "set"
            type: COMMAND
        };
    }

    rpc Get(GetRequest) returns (GetResponse) {
        option (atomix.service.operation) = {
            name: "get"
            type: QUERY
        };
    }

    rpc CheckAndSet(CheckAndSetRequest) returns (CheckAndSetResponse) {
        option (atomix.service.operation) = {
            name: "cas"
            type: COMMAND
        };
    }

    rpc Listen(ListenRequest) returns (stream ListenResponse) {
        option (atomix.service.operation) = {
            name: "listen"
            type: COMMAND
        };
    }

    rpc Unlisten(UnlistenRequest) returns (UnlistenResponse) {
        option (atomix.service.operation) = {
            name: "unlisten"
            type: COMMAND
        };
    }
}