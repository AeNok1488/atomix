syntax = "proto3";

import "raft.proto";
import "log.proto";

package atomix.raft.protocol;

option java_package = "io.atomix.protocols.raft.protocol";
option java_outer_classname = "RaftProtocolProto";
option java_multiple_files = true;

message JoinRequest {
    RaftMember member = 1;
}

message JoinResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 index = 3;
    int64 term = 4;
    int64 timestamp = 5;
    repeated RaftMember members = 6;
}

message ConfigureRequest {
    int64 term = 1;
    string leader = 2;
    int64 index = 3;
    int64 timestamp = 4;
    repeated RaftMember members = 5;
}

message ConfigureResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
}

message ReconfigureRequest {
    RaftMember member = 1;
    int64 index = 2;
    int64 term = 3;
}

message ReconfigureResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 index = 3;
    int64 term = 4;
    int64 timestamp = 5;
    repeated RaftMember members = 6;
}

message LeaveRequest {
    RaftMember member = 1;
}

message LeaveResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 index = 3;
    int64 term = 4;
    int64 timestamp = 5;
    repeated RaftMember members = 6;
}

message PollRequest {
    int64 term = 1;
    string candidate = 2;
    int64 last_log_index = 3;
    int64 last_log_term = 4;
}

message PollResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 term = 3;
    bool accepted = 4;
}

message VoteRequest {
    int64 term = 1;
    string candidate = 2;
    int64 last_log_index = 3;
    int64 last_log_term = 4;
}

message VoteResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 term = 3;
    bool voted = 4;
}

message TransferRequest {
    string member_id = 1;
}

message TransferResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
}

message AppendRequest {
    int64 term = 1;
    string leader = 2;
    int64 prev_log_index = 3;
    int64 prev_log_term = 4;
    repeated atomix.raft.storage.log.RaftLogEntry entries = 5;
    int64 commit_index = 6;
}

message AppendResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 term = 3;
    bool succeeded = 4;
    int64 last_log_index = 5;
}

message InstallRequest {
    int64 term = 1;
    string leader = 2;
    int64 index = 3;
    int64 timestamp = 4;
    bytes data = 5;
    bool complete = 6;
}

message InstallResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
}

message OpenSessionRequest {
    string member_id = 1;
    string service_name = 2;
    string service_type = 3;
    ReadConsistency read_consistency = 4;
    int64 timeout = 5;
}

message OpenSessionResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 session_id = 3;
    int64 timeout = 4;
}

message MetadataRequest {
    int64 session_id = 1;
}

message MetadataResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    repeated SessionMetadata sessions = 3;
}

message KeepAliveRequest {
    repeated int64 session_ids = 1;
    repeated int64 command_sequences = 2;
    repeated int64 event_indexes = 3;
}

message KeepAliveResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    string leader = 3;
    repeated string members = 4;
    repeated int64 sessions = 5;
}

message CloseSessionRequest {
    int64 session_id = 1;
    bool delete = 2;
}

message CloseSessionResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
}

message OperationRequest {
    int64 session_id = 1;
    int64 sequence_number = 2;
    oneof operation {
        Command command = 3;
        Query query = 4;
    }
}

message Command {
    string name = 1;
    bytes command = 2;
}

message Query {
    string name = 1;
    bytes query = 2;
    int64 index = 3;
}

message OperationResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    string message = 3;
    int64 index = 4;
    int64 event_index = 5;
    bytes output = 6;
    int64 last_sequence_number = 7;
}

message PublishRequest {
    int64 session_id = 1;
    int64 event_index = 2;
    int64 previous_index = 3;
    repeated RaftEvent events = 4;
}

message ResetRequest {
    int64 session_id = 1;
    int64 index = 2;
}

message RaftEvent {
    string type = 1;
    bytes value = 2;
}

enum ResponseStatus {
    OK = 0;
    ERROR = 1;
}

enum RaftError {
    NO_LEADER = 0;
    QUERY_FAILURE = 1;
    COMMAND_FAILURE = 2;
    APPLICATION_ERROR = 3;
    ILLEGAL_MEMBER_STATE = 4;
    UNKNOWN_CLIENT = 5;
    UNKNOWN_SESSION = 6;
    UNKNOWN_SERVICE = 7;
    CLOSED_SESSION = 8;
    PROTOCOL_ERROR = 9;
    CONFIGURATION_ERROR = 10;
    UNAVAILABLE = 11;
}
